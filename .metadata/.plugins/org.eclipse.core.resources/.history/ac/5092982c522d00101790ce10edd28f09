package com.example.propertymanagementsystem.controller;

import com.example.propertymanagementsystem.model.Booking;
import com.example.propertymanagementsystem.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/bookings")
@CrossOrigin(origins = "http://localhost:3000")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @PostMapping
    public ResponseEntity<?> createBooking(@RequestBody Booking booking, @RequestHeader("Authorization") String token) {
        try {
            Booking createdBooking = bookingService.createBooking(booking, token);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Booking created successfully",
                "booking", createdBooking
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }

    @GetMapping("/my-bookings")
    public ResponseEntity<?> getBuyerBookings(@RequestHeader("Authorization") String token) {
        try {
            List<Booking> bookings = bookingService.getBuyerBookings(token);
            return ResponseEntity.ok(bookings);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }

    @GetMapping("/seller-bookings")
    public ResponseEntity<?> getSellerBookings(@RequestHeader("Authorization") String token) {
        try {
            List<Booking> bookings = bookingService.getSellerBookings(token);
            return ResponseEntity.ok(bookings);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }

    @PutMapping("/{id}/status")
    public ResponseEntity<?> updateBookingStatus(
            @PathVariable Long id,
            @RequestBody Map<String, String> statusUpdate,
            @RequestHeader("Authorization") String token) {
        try {
            String status = statusUpdate.get("status");
            Booking updatedBooking = bookingService.updateBookingStatus(id, status, token);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Booking status updated successfully",
                "booking", updatedBooking
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }
} 