package com.pms.sdp.controller;

import com.pms.sdp.service.BookingService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/bookings")
@RequiredArgsConstructor
public class BookingController {

    private final BookingService bookingService;

    /**
     * Create a new booking (BUYER only)
     */
    @PostMapping("/property/{propertyId}")
    @PreAuthorize("hasRole('BUYER')")
    public ResponseEntity<Map<String, Object>> createBooking(
            Authentication authentication,
            @PathVariable Long propertyId,
            @RequestBody Map<String, Object> bookingData
    ) {
        String username = authentication.getName();
        Map<String, Object> response = bookingService.createBooking(username, propertyId, bookingData);
        return ResponseEntity.ok(response);
    }

    /**
     * Update booking status (both BUYER and SELLER can update)
     */
    @PutMapping("/{bookingId}/status")
    @PreAuthorize("hasAnyRole('BUYER', 'SELLER')")
    public ResponseEntity<Map<String, Object>> updateBookingStatus(
            Authentication authentication,
            @PathVariable Long bookingId,
            @RequestParam String status,
            @RequestParam(required = false) String paymentId,
            @RequestParam(required = false) String signature
    ) {
        String username = authentication.getName();
        Map<String, Object> response = bookingService.updateBookingStatus(username, bookingId, status, paymentId, signature);
        return ResponseEntity.ok(response);
    }

    /**
     * Get specific booking (with access control)
     */
    @GetMapping("/{bookingId}")
    public ResponseEntity<Map<String, Object>> getBookingById(
            Authentication authentication,
            @PathVariable Long bookingId
    ) {
        String username = authentication.getName();
        Map<String, Object> booking = bookingService.getBookingById(username, bookingId);
        return ResponseEntity.ok(booking);
    }

    /**
     * Get all bookings for buyer (BUYER only)
     */
    @GetMapping("/my")
    @PreAuthorize("hasRole('BUYER')")
    public ResponseEntity<List<Map<String, Object>>> getMyBookings(Authentication authentication) {
        String username = authentication.getName();
        List<Map<String, Object>> bookings = bookingService.getBuyerBookings(username);
        return ResponseEntity.ok(bookings);
    }

    /**
     * Get all bookings for seller's properties (SELLER only)
     */
    @GetMapping("/seller")
    @PreAuthorize("hasRole('SELLER')")
    public ResponseEntity<List<Map<String, Object>>> getSellerBookings(Authentication authentication) {
        String username = authentication.getName();
        List<Map<String, Object>> bookings = bookingService.getSellerBookings(username);
        return ResponseEntity.ok(bookings);
    }
}