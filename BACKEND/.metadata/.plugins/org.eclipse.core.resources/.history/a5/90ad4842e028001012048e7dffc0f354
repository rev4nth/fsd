package com.pms.sdp.service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import java.io.UnsupportedEncodingException;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;
    private final TemplateEngine templateEngine;
    
    @Value("${spring.mail.username}")
    private String fromEmail;
    
    @Value("${application.name:RevStay}")
    private String applicationName;
    
    /**
     * Sends a welcome email to newly registered users
     * @param toEmail recipient email address
     * @param fullName recipient full name
     * @param username recipient username
     * @return boolean indicating if the email was sent successfully
     */
    @Async
    public boolean sendWelcomeEmail(String toEmail, String fullName, String username) {
        log.info("Preparing to send welcome email to: {}", toEmail);
        
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            // Set email details
            log.debug("Setting email sender: {}", fromEmail);
            helper.setFrom(fromEmail, applicationName);
            
            log.debug("Setting email recipient: {}", toEmail);
            helper.setTo(toEmail);
            
            helper.setSubject("Welcome to RevStay!");
            
            // Prepare the evaluation context for the template
            Context context = new Context();
            context.setVariable("fullName", fullName);
            context.setVariable("username", username);
            
            // Process the template and set email content
            log.debug("Processing email template");
            String emailContent = templateEngine.process("welcome", context);
            helper.setText(emailContent, true);
            
            // Send the email
            log.debug("Attempting to send email");
            mailSender.send(message);
            
            log.info("Welcome email sent successfully to: {}", toEmail);
            return true;
        } catch (UnsupportedEncodingException e) {
            log.error("Encoding error when sending email to {}: {}", toEmail, e.getMessage());
            return false;
        } catch (MessagingException e) {
            log.error("Failed to construct email message for {}: {}", toEmail, e.getMessage());
            return false;
        } catch (MailException e) {
            log.error("Failed to send email to {}: {}", toEmail, e.getMessage());
            log.error("SMTP Error details: ", e);
            return false;
        } catch (Exception e) {
            log.error("Unexpected error when sending email to {}: {}", toEmail, e.getMessage());
            log.error("Stack trace: ", e);
            return false;
        }
    }
    
    /**
     * Test method to verify email configuration
     * @return boolean indicating if the test email was sent successfully
     */
    public boolean testEmailConfiguration() {
        log.info("Testing email configuration");
        
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            
            helper.setFrom(fromEmail, applicationName);
            helper.setTo(fromEmail); // Send to self for testing
            helper.setSubject("RevStay Email Configuration Test");
            helper.setText("This is a test email to verify the email configuration is working correctly.", false);
            
            mailSender.send(message);
            log.info("Test email sent successfully to: {}", fromEmail);
            return true;
        } catch (Exception e) {
            log.error("Failed to send test email: {}", e.getMessage());
            log.error("Stack trace: ", e);
            return false;
        }
    }
}